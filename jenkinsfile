pipeline {
    agent { 
        node {
            label 'Node1'
        }
    }
    parameters {
        choice(name: 'ACTION', choices: ['deploy', 'delete', 'adhoc'])
        string(name: 'ADHOC_COMMAND', defaultValue: '', description: 'Enter adhoc command: ')
    }
    stages {
        stage('Deploy to kubernetes cluster') {
            when {
                expression { return params.ACTION == 'deploy' }
            }
            steps {
                script {
                    echo 'Deploying.......'
                    ansiblePlaybook(
                        installation: 'Ansible',
                        inventory: 'Ansible/inventory.k8s.yml',
                        playbook: 'Ansible/deploy_playbook.yml',
                        colorized: true
                    )
                }
            }
        }
        stage('Delete Deployment') {
            when {
                expression { return params.ACTION == 'delete' }
            }
            steps {
                script {
                    echo 'Deleting.......'
                    ansiblePlaybook(
                        installation: 'Ansible',
                        inventory: 'Ansible/inventory.k8s.yml',
                        playbook: 'Ansible/delete_playbook.yml',
                        colorized: true
                    )
                }
            }
        }
        stage('Run adhoc command') {
            when {
                expression { return params.ACTION == 'adhoc' }
            }
            steps {
                script {
                    if (params.ADHOC_COMMAND) {
                        echo "Running adhoc command: ${params.ADHOC_COMMAND}"
                        sh """
                            ansible-playbook Ansible/adhoc_playbook.yml -i Ansible/inventory.k8s.yml ${params.ADHOC_COMMAND} 
                        """
                    } else {
                        error "No valid adhoc command provided!"
                    }
                }
            }
        }
    }
}
